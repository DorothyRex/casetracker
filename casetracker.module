<?php
// $Id: casetracker.module,v 1.123.2.14 2009/08/13 04:48:15 yhahn Exp $

/**
 * @file
 * Enables the handling of projects and their cases.
 *
 * TODO the 2.x rewrite
 *   - make case metadata exportable
 *      - string identifies for case states
 *   - make case metadata localizable and/or translatable
 *   - make case metadata extensible
 *      - new types (support due dates, time estimates)
 *      - easily overridable (custom states per group)
 *   - support notifications/messaging
 *   - support mailhandler
 */

/**
 * Implementation of hook_views_api().
 */
function casetracker_views_api() {
  return array('api' => 2);
}

function casetracker_ctools_plugin_api($module, $api) {
  if ($module == 'casetracker' && $api == 'properties') {
    return array('version' => 1);
  }
}

/**
 * Implementation of hook_help().
 */
function casetracker_help($path, $arg) {
  switch ($path) {
    case 'admin/settings/casetracker/states':
      return '<p>'. t('Current Case Tracker case states are listed below.') .'</p>';
    case 'admin/settings/casetracker/states/add':
      return '<p>'. t('You may add a new case state below.') .'</p>';
    case 'admin/settings/casetracker/states/edit/'. arg(4):
      return '<p>'. t('You may edit an existing case state below.') .'</p>';
    case 'admin/settings/casetracker':
      return '<p>'. t('Configure the various Case Tracker options with these settings.') .'</p>';
  }
}

/**
 * Implementation of hook_perm().
 */
function casetracker_perm() {
  return array(
    'access case tracker',
    'administer case tracker',
  );
}

/**
 * Implementation of hook_menu().
 */
function casetracker_menu() {
  /* casetracker main settings */
  $items['admin/settings/casetracker'] = array(
    'file' => 'casetracker_admin.inc',
    'access arguments' => array('administer case tracker'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('casetracker_settings'),
    'description' => 'Configure the various Case Tracker options with these settings.',
    'title' => 'Case Tracker',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/settings/casetracker/settings'] = array(
    'file' => 'casetracker_admin.inc',
    'access arguments' => array('administer case tracker'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('casetracker_settings'),
    'title' => 'Settings',
    'weight' => -10,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/settings/casetracker/templates'] = array(
    'file' => 'casetracker_admin.inc',
    'access arguments' => array('administer case tracker'),
    'page callback' => 'casetracker_templates_page',
    'type' => MENU_LOCAL_TASK,
    'title' => 'Templates',
    'description' => 'Add, edit and delete meta-data templates ',
  );
  $items['admin/settings/casetracker/templates/list'] = array(
    'file' => 'casetracker_admin.inc',
    'access arguments' => array('administer case tracker'),
    'page callback' => 'casetracker_templates_page',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'List',
    'weight' => -10,
    'description' => 'Add, edit and delete meta-data templates ',
  );
  $items['admin/settings/casetracker/templates/add'] = array(
    'file' => 'casetracker_admin.inc',
    'access arguments' => array('administer case tracker'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('casetracker_template_edit'),
    'title' => 'Add case template',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/settings/casetracker/templates/%casetracker_template/clone'] = array(
    'file' => 'casetracker_admin.inc',
    'access arguments' => array('administer case tracker'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('casetracker_template_edit', 4, FALSE),
    'title' => 'Edit case template',
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/casetracker/templates/%casetracker_template/edit'] = array(
    'file' => 'casetracker_admin.inc',
    'access arguments' => array('administer case tracker'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('casetracker_template_edit', 4),
    'title' => 'Edit case template',
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/casetracker/templates/%casetracker_template/delete'] = array(
    'file' => 'casetracker_admin.inc',
    'access arguments' => array('administer case tracker'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('casetracker_template_confirm_delete', 4),
    'title' => 'Delete case state',
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/casetracker/templates/%casetracker_template/disable'] = array(
    'file' => 'casetracker_admin.inc',
    'access arguments' => array('administer case tracker'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('casetracker_template_confirm_disable', 4),
    'title' => 'Disable case state',
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/casetracker/states'] = array(
    'file' => 'casetracker_admin.inc',
    'access arguments' => array('administer case tracker'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('casetracker_states', 4),
    'type' => MENU_LOCAL_TASK,
    'title' => 'States',
    'description' => 'Add, edit and delete meta-data templates ',
  );
  $items['admin/settings/casetracker/states/list'] = array(
    'file' => 'casetracker_admin.inc',
    'access arguments' => array('administer case tracker'),
    'page callback' => 'casetracker_states_page',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'List',
    'weight' => -10,
    'description' => 'Add, edit and delete meta-data templates ',
  );
  $items['admin/settings/casetracker/states/add'] = array(
    'file' => 'casetracker_admin.inc',
    'access arguments' => array('administer case tracker'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('casetracker_state_edit'),
    'title' => 'Add case state',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/settings/casetracker/states/%casetracker_state/edit'] = array(
    'file' => 'casetracker_admin.inc',
    'access arguments' => array('administer case tracker'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('casetracker_state_edit', 4),
    'title' => 'Edit case state',
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/casetracker/states/%casetracker_state/delete'] = array(
    'file' => 'casetracker_admin.inc',
    'access arguments' => array('administer case tracker'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('casetracker_case_state_confirm_delete', 4),
    'title' => 'Delete case state',
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/casetracker/states/%casetracker_state/disable'] = array(
    'file' => 'casetracker_admin.inc',
    'access arguments' => array('administer case tracker'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('casetracker_case_state_confirm_disable', 4),
    'title' => 'Disable case state',
    'type' => MENU_CALLBACK,
  );
  /* casetracker autocomplete */
  $items['casetracker_autocomplete'] = array(
    'title' => 'Case Tracker autocomplete',
    'page callback' => 'casetracker_autocomplete',
    'access callback' => 'user_access',
    'access arguments' => array('access case tracker'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_casetracker_properties()
 */
function casetracker_casetracker_properties() {
  $info = array();
  $info['casetracker_property_state'] = array(
    'title' => t('State'),
    'handler' => 'casetracker_property_state',
    'file' => 'includes/casetracker_property_state.inc'
  );
  $info['casetracker_views_property'] = array(
    'handler' => 'casetracker_views_property',
    'file' => 'includes/casetracker_views_property.inc'
  );
  $info['casetracker_property_node'] = array(
    'title' => t('Node'),
    'handler' => array(
      'parent' => 'casetracker_views_property',
      'class' => 'casetracker_property_node',
      'file' => 'casetracker_property_node.inc',
      'path' => drupal_get_path('module', 'casetracker') . '/includes',
    ),
  );
  $info['casetracker_property_user'] = array(
    'title' => t('User'),
    'handler' => array(
      'parent' => 'casetracker_views_property',
      'class' => 'casetracker_property_user',
      'file' => 'casetracker_property_user.inc',
      'path' => drupal_get_path('module', 'casetracker') . '/includes',
    ),    
  );
  return $info;
}

/**
 * Implementation of hook_nodeapi().
 */
function casetracker_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  // CASES
  if ($template_name = casetracker_is_case($node)) {
    switch ($op) {

      case 'insert':
      case 'update':
        // First we write the pointer to the current state.
        $record = array(
          'nid' => $node->nid,
          'type' => 'node',
          'id' => $node->vid,
          'title' => $node->title,
        );
        if ($node->is_new) {
          drupal_write_record('casetracker_case', $record);
        }
        else {
          drupal_write_record('casetracker_case', $record, array('type', 'id'));
        }
        // Then we write the state details.
        foreach ($node->casetracker as $k => $v) {
          $record['meta_type'] = $k;
          $record['meta_id'] = $v;
          if ($node->revision || $node->is_new) {
            drupal_write_record('casetracker_case_status', $record);
          }
          else {
            drupal_write_record('casetracker_case_status', $record, array('type', 'id'));
          }
        }
        break;

      case 'load':
        $result = db_query('SELECT * FROM {casetracker_case_status} WHERE nid = %d AND type = "node" AND id = %d', $node->nid, $node->vid);
        $info = array();
        while($row = db_fetch_array($result)) {
          $info[$row['meta_type']] = $row;
        }
        return array('casetracker' => $info);

      case 'view':
        $node->content['casetracker_case_summary'] = array(
          '#value' => theme('casetracker_case_summary', $template_name, $node),
          '#weight' => -10
        );
        break;

      case 'delete':
        // // delete case and its comments.
        // $comment_results = db_query("SELECT cid FROM {comments} WHERE nid = %d", $node->nid);
        // while ($comment_result = db_fetch_object($comment_results)) {
        //   db_query("DELETE FROM {casetracker_comment_status} WHERE cid = %d", $comment_result->cid);
        // }
        // db_query('DELETE FROM {casetracker_case} WHERE nid = %d', $node->nid);
        break;
    }
  }
  // PROJECTS
  // else if (casetracker_is_project($node->type)) {
  //   switch ($op) {
  // 
  //     case 'delete':
  //       // projects: delete all the cases under the project and all the comments under each case.
  //       $case_results = db_query("SELECT nid from {casetracker_case} WHERE pid = %d", $node->nid);
  //       while ($case_result = db_fetch_object($case_results)) {
  //         db_query("DELETE FROM {casetracker_case} WHERE nid = %d", $case_result->nid);
  //         $comment_results = db_query("SELECT cid FROM {comments} WHERE nid = %d", $case_result->nid);
  //         while ($comment_result = db_fetch_object($comment_results)) {
  //           db_query("DELETE FROM {casetracker_comment_status} WHERE cid = %d", $comment_result->cid);
  //         }
  //         node_delete($case_result->nid); // this'll handle comment deletion too.
  //       }
  //       break;
  // 
  //     case 'view':
  //       if ($page) {
  //         $trail = array(
  //           l(t('Home'), NULL),
  //           l(t('Case Tracker'), 'casetracker/projects'),
  //         );
  //         drupal_set_breadcrumb($trail);
  //       }
  //     
  //       $node->content['casetracker_project_summary'] = array('#value' => theme('casetracker_project_summary', $node), '#weight' => -10);
  //       break;
  //   }
  // }
}

/**
 * Implementation of hook_comment().
 */
function casetracker_comment(&$comment, $op) {
  // Ensure we have the node object.
  $node = is_array($comment) ? node_load($comment['nid']) : node_load($comment->nid);

  if ($template_name = casetracker_is_case($node)) {
    switch ($op) {
      case 'insert':
      case 'update':
        $record = array(
          'nid' => $node->nid,
          'type' => 'comment',
          'id' => $comment['cid'],
          'title' => $node->title,
        );
        // First we write the pointer to the current state only for new comments.
        if ($op == 'insert') {
          drupal_write_record('casetracker_case', $record);
        }

        // Then we write the state details.
        foreach ($node->casetracker as $k => $v) {
          $record['meta_type'] = $k;
          $record['meta_id'] = $v;
          if ($op == 'insert') {
            drupal_write_record('casetracker_case_status', $record);
          }
          else {
            drupal_write_record('casetracker_case_status', $record, array('type', 'id'));
          }
        }
        break;
      // case 'delete':
      //   // @todo theoretically, if you delete a comment, we should reset all the values
      //   // to what they were before the comment was submitted. this doesn't happen yet.
      //   db_query("DELETE FROM {casetracker_comment_status} WHERE cid = %d", $comment->cid);
      //   break;
      case 'view':
        // If this is a preview we won't have a cid yet.
        if (empty($comment->cid)) {
          // $case_data['new'] = (object)$comment->casetracker;
          // $case_data['new']->assign_to = casetracker_get_uid($case_data['new']->assign_to);
          // $case = node_load($comment->nid);
          // $case_data['old'] = drupal_clone($case->casetracker);
        }
        else {
          // $results = db_query("SELECT * FROM {casetracker_comment_status} WHERE cid = %d", $comment->cid);
          // while ($result = db_fetch_object($results)) {
          //   $state = $result->state ? 'new' : 'old';
          //   $case_data[$state] = $result;
          // }
        }
        $comment->comment = theme('casetracker_comment_changes', $case_data['old'], $case_data['new']) . $comment->comment;        
        break;
    }
  }
}

/**
 * Implementation of hook_form_alter().
 */
function casetracker_form_alter(&$form, &$form_state, $form_id) {
  if (!empty($form['#node'])) {
    casetracker_case_form_common($form);
  }
}

/**
 * Implementation of hook_form_comment_form_alter().
 */
function casetracker_form_comment_form_alter(&$form, &$form_state) {
  $node = isset($form['nid']['#value']) ? node_load($form['nid']['#value']) : NULL;
  $form['#node'] = $node;
  casetracker_case_form_common($form);

  // // necessary for our casetracker_comment() callback.
  // $form['revision_id'] = array('#type' => 'hidden', '#value' => $node->vid);
}

/**
 * Common form elements for cases, generic enough for use either in
 * a full node display, or in comment displays and updating. Default
 * values are calculated based on an existing $form['nid']['#value'].
 *
 * @param $form
 *   A Forms API $form, as received from a hook_form_alter().
 * @param $default_project
 *   The project ID that should be pre-selected.
 * @return $form
 *   A modified Forms API $form.
 */
function casetracker_case_form_common(&$form, $default_project = NULL) {
  $node = $form['#node'];

  if ($template_name = casetracker_is_case($node)) {
    ctools_include('export'); 
    ctools_include('plugins');
    $templates = ctools_export_load_object('casetracker_templates', 'names', array($template_name));

    // On preview the case will be an array, we want an object.
    if (isset($node->build_mode) && $node->build_mode == NODE_BUILD_PREVIEW) {
      $node->casetracker = (object)$node->casetracker;
    }

    $form['casetracker'] = array(
      '#type' => 'fieldset',
      '#title' => t('Case information'),
      '#weight' => -10,
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#tree' => TRUE,
      '#theme' => 'casetracker_case_form_common',
    );
    
    foreach ($templates[$template_name]->properties as $p) {
      $class = ctools_plugin_load_class('casetracker', 'properties', $p->type, 'handler');
      $type = new $class();
      $type->option_form($form['casetracker'], $p, $node);
    }
  }
}

/**
 * Load a single casetracker template.
 */
function casetracker_template_load($name) {
  ctools_include('export');
  $templates = ctools_export_load_object('casetracker_templates', 'names', array($name));
  return array_shift($templates);
}

/**
* Implementation of hook_block
*/
function casetracker_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0] = array(
        'info' => t('Jump to case'),
      );
      return $blocks;
    case 'configure':
       return array();
    case 'save':
        return;
    case 'view':
      switch ($delta) {
        case 0:
          if (user_access('access case tracker')) {
            $block['subject'] = t('Jump to case');
            $block['content'] = drupal_get_form('casetracker_block_jump_to_case_number');
          }
          break;
      }
      return $block;
  }
}

/**
 * Form for "Jump to case number" block.
 */
function casetracker_block_jump_to_case_number() {
  $form = array();
  $form['case_number'] = array(
    '#maxlength' => 60, 
    '#required' => TRUE,
    '#size' => 15,
    '#title' => t('Case number'),
    '#type' => 'textfield',
    '#prefix' => '<div class="container-inline">',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Go'),
    '#suffix' => '</div>',
  );
  return $form;
} 

/**
 * Submit function for our "Jump to case number" block.
 */
function casetracker_block_jump_to_case_number_submit($form, $form_state) {
  list($pid, $nid) = explode('-', $form_state['values']['case_number']);
  $case_nid = db_result(db_query("SELECT nid FROM {casetracker_case} WHERE pid = %d AND nid = %d", $pid, $nid));
  if (!$case_nid) {
    drupal_set_message(t('Your case number was not found.'), 'error');
    return;
  }
  drupal_goto('node/'. $case_nid);
}

/**
 * CASE STATE CRUD ====================================================
 *
 * Note: a save method isn't provided, simply use drupal_write_record().
 */

/**
 * Returns information about the various case states and their options.
 * The number of parameters passed will determine the return value.
 *
 * @param $name
 *   Optional; the state ID to return from the passed $realm.
 * @param $realm
 *   Optional; the name of the realm ('status', 'priority', or 'type').
 * @param $reset
 *   Optional; set to TRUE to reset the static cache.
 *
 * @return $values
 *   If only $realm is passed, you'll receive an array with the keys
 *   being the state ID and the values being their names. If a $csid
 *   is also passed, you'll receive just a string of the state name.
 *   If ONLY a $csid is passed, we'll return a list of 'name', 'realm'.
 */
function casetracker_state_load($name = NULL, $realm = NULL, $reset = FALSE) {
  ctools_include('export');

  if ($name) {
    $states = ctools_export_load_object('casetracker_states', 'names', array($name));
    return array_shift($states);
  }
  elseif (!$name && $realm) {
    $states = ctools_export_load_object('casetracker_states', 'conditions', array('realm' => $realm));
    $options = array(); // suitable for form api.
    if (!empty($states)) {
      foreach ($states as $s) {
        $options[$s->name] = $s->title;
      }
    }
    return $options;
  }
}

/**
 * Deletes a case state.
 *
 * @todo There is currently no attempt to do anything with cases which
 * have been assigned the $csid that is about to be deleted. We should
 * reset them to the default per our settings (and warn the user on our
 * confirmation page), or something else entirely.
 * 
 * @param $name
 *   The case state ID to delete.
 */
function casetracker_state_delete($name = NULL) {
  if (!empty($csid)) {
    db_query('DELETE FROM {casetracker_case_states} WHERE name = %d', $name);
  }
}

/**
 * Load states for a particular realm. Wrapper around casetracker_case_state_load()
 *
 * @param $realm
 *   Name of the realm ('status', 'priority', or 'type').
 * @return
 *   array with the keys being the state ID and the values being their names.
 */
function casetracker_realm_load($realm) {
  return casetracker_state_load(null, $realm);
}

/**
 * Retrieve a list of realms, suitable for form api
 *
 * @param $reset
 *   Reset the static cache.
 *
 * @return array of realms, machine_name => Name
 */
function casetracker_realm_list($reset = false) {
  static $realms;
  if (!isset($realms) || $reset) {
    ctools_include('export');
    $states = ctools_export_load_object('casetracker_states', 'all');
    $realms = array();
    foreach ($states as $i) {
      if (!isset($realms[$i->realm])) {
        $realms[$i->realm->name] = $i->realm->title;
      }
    }
    $realms = array_merge($realms, variable_get('casetracker_realms', array('status' => t('Status'), 'type' => t('Type'), 'priority' => t('Priority'))));
  }
  return $realms;
}

/**
 * COMMENT DISPLAY ====================================================
 */

/**
 * Retrieve autocomplete suggestions for assign to user options.
 *
 * @TODO: In order to get this down to 1 query and respect any custom
 * views selected for use as user option filters, we need to:
 * - Submit a patch to the Views user name filter/argument handler to support LIKE filtering.
 * - Ensure that the custom view uses this handler or add it if does not.
 * - Generate the query & result set using this modified View.
 */
function casetracker_autocomplete($string) {
  $matches = array();
  $options = casetracker_user_options();
  $result = db_query_range("SELECT name FROM {users} WHERE LOWER(name) LIKE LOWER('%s%%')", $string, 0, 10);
  while ($user = db_fetch_object($result)) {
    if (in_array($user->name, $options, TRUE)) {
      $matches[$user->name] = check_plain($user->name);
    }
  }
  drupal_json($matches);
}

/**
 * Returns an query string needed in case of Organic Groups
 * providing preselected audience checkboxes for projects as groups (og)
 * 
 * @param   object  CT project
 * @return  string
 */
function _casetracker_get_og_query_string(&$project) {
  $querystring = array();
  // checking if project is group
  if ($project->type == 'group') {
    $querystring[] = 'gids[]='. $project->nid;
    //checking if group-project is part of another group
    if (isset($project->og_groups) 
      && is_array($project->og_groups) 
    ) {
      foreach ($project->og_groups as $group) {
        $querystring[] = 'gids[]='. $group;
      }
    }
  }
  //checking if project is part of a group
  elseif (isset($project->og_groups) 
    && is_array($project->og_groups) 
    && $project->type !== 'group'
  ) {
    foreach ($project->og_groups as $group) {
      $querystring[] = 'gids[]='. $group;
    }
  }
 
  return (0 < count($querystring))
      ? implode('&', $querystring)
      : NULL;
}

/**
 * THEME ==============================================================
 */

/**
 * Implementation of hook_theme
 */
function casetracker_theme() {
  return array(
    'casetracker_comment_changes' => array(),
    'casetracker_case_form_common' => array(),
    'casetracker_case_summary' => array(),
    'casetracker_project_summary' => array(),
    'casetracker_states_form' => array(),
  );
}

/**
 * Displays the changes a comment has made to the case fields.
 *
 * @param $case_data
 *   An array of both 'old' and 'new' objects that contains
 *   the before and after values this comment has changed.
 */
function theme_casetracker_comment_changes($old, $new) {
  $rows = array();

  $fields = array(
    'pid' => t('Project'),
    'title' => t('Title'),
    'case_status_id' => t('Status'),
    'assign_to' => t('Assigned'),
    'case_priority_id' => t('Priority'),
    'case_type_id' => t('Type'),
  );
  foreach ($fields as $field => $label) {
    if ($new->{$field} != $old->{$field}) {
      switch ($field) {
        case 'pid':
          $old_title = db_result(db_query("SELECT title FROM {node} WHERE nid = %d", $old->pid));
          $new_title = db_result(db_query("SELECT title FROM {node} WHERE nid = %d", $new->pid));
          $old->{$field} = l($old_title, "node/{$old->pid}");
          $new->{$field} = l($new_title, "node/{$new->pid}");
          break;
        case 'case_status_id':
          $old->{$field} = casetracker_case_state_load($old->{$field}, 'status');
          $new->{$field} = casetracker_case_state_load($new->{$field}, 'status');
          break;
        case 'assign_to':
          $old->{$field} = casetracker_get_name($old->{$field});
          $new->{$field} = casetracker_get_name($new->{$field});
          break;
        case 'case_priority_id':
          $old->{$field} = casetracker_case_state_load($old->{$field}, 'priority');
          $new->{$field} = casetracker_case_state_load($new->{$field}, 'priority');
          break;
        case 'case_type_id':
          $old->{$field} = casetracker_case_state_load($old->{$field}, 'type');
          $new->{$field} = casetracker_case_state_load($new->{$field}, 'type');
          break;
      }
      $rows[] = array(t('!label: !old &raquo; !new', array('!label' => $label, '!old' => $old->{$field}, '!new' => $new->{$field})));
    }
  }

  return theme('table', NULL, $rows, array('class' => 'case_changes'));
}

/**
 * Theme function for cleaning up the casetracker common form.
 */
function theme_casetracker_case_form_common($form) {
  drupal_add_css(drupal_get_path('module', 'casetracker') .'/casetracker.css');
  $output = '';
  $output .= drupal_render($form['pid']);
  $output .= drupal_render($form['case_title']);

  if ($form['assign_to']['#type'] == 'radios') {
    $header = array_fill(0, 5, array());
    $header[0] = $form['assign_to']['#title'];
    $radios = array();
    foreach (element_children($form['assign_to']) as $id) {
      $radios[] = drupal_render($form['assign_to'][$id]);
    }
    $radios = array_chunk($radios, 5);
    $output .= theme('table', $header, $radios, array('class' => 'casetracker-assign-to'));
    drupal_render($form['assign_to']);
  }
  else {
    $output .= drupal_render($form['assign_to']);
  }

  $row = array();
  foreach (element_children($form) as $id) {
    if (!in_array($id, array('pid', 'case_title', 'assign_to'))) {
      $row[] = drupal_render($form[$id]);
    }
  }
  $rows = array($row);
  $output .= theme('table', array(), $rows);
  $output .= drupal_render($form);
  return $output;
}

/**
 * Theme the case summary shown at the beginning of a case's node.
 *
 * @param $case
 *   The node object of the case being viewed.
 * @param $project
 *   The node object of the project this case belongs to.
 */
function theme_casetracker_case_summary($template_name, $node) {
  $rows = array();
  ctools_include('export'); 
  ctools_include('plugins');
  $templates = ctools_export_load_object('casetracker_templates', 'names', array($template_name));
  foreach ($templates[$template_name]->properties as $p) {
    $class = ctools_plugin_load_class('casetracker', 'properties', $p->type, 'handler');
    $type = new $class();
    $rows[] = array($type->display($p, $node));
  }
  return theme('table', NULL, $rows, array('class' => 'summary'));
}

/**
 * Theme the project summary shown at the beginning of a project's node.
 *
 * @param $project
 *   The node object of the project being viewed.
 */
function theme_casetracker_project_summary($project) {
  $rows = array();
  $rows[] = array(t('Project number:'), $project->nid);
  $rows[] = array(t('Opened by:'), theme('username', $project));
  $rows[] = array(t('Opened on:'), format_date($project->created, 'large'));
  $rows[] = array(t('Last modified:'), format_date($project->changed, 'large'));

  $querystring = _casetracker_get_og_query_string($project);
  $operations = array(); $node_types = node_get_types('names');
  foreach (array_filter(variable_get('casetracker_case_node_types', array('casetracker_basic_case'))) as $type) {
    $operations[] = l(
      t('add !name', array('!name' => $node_types[$type])), 
      'node/add/'. str_replace('_', '-', $type) .'/'. $project->nid,
      array('query' => $querystring)
    );
  } 
  $operations = implode(' | ', $operations); // ready for printing in our Operations table cell - delimited by a pipe. nonstandard.
  $rows[] = array(t('Operations:'), $operations .' | '. l(t('view all project cases'), 'casetracker', array('query' => 'keys=&pid='. $project->nid)));

  $output  = '<div class="project">';
  $output .= theme('table', NULL, $rows, array('class' => 'summary'));
  $output .= '</div>';
  return $output;
}

/**
 * API FUNCTIONS ======================================================
 */

/**
 * API function for checking whether a node type has an associated casetracker template.
 * @param $node
 *   a node object
 * @return a template name or false.
 */
function casetracker_is_case($node) {
  $types = variable_get('casetracker_case_node_types', array());
  if ($template_name = $types[$node->type]) {
    return $template_name;
  }
  return false;
}

/**
 * API function for checking whether a node type is a casetracker project.
 */
function casetracker_is_project($node) {
  if (is_object($node) && !empty($node->type)) {
    $type = $node->type;
  }
  else if (is_string($node)) {
    $type = $node;
  }
  if ($type) {
    return in_array($type, variable_get('casetracker_project_node_types', array('casetracker_basic_project')), TRUE);
  }
  return FALSE;
}

/**
 * Given a user name, returns the uid of that account.
 * If the passed name is not found, returns 0.
 * See also casetracker_get_name().
 */
function casetracker_get_uid($name = NULL, $reset = FALSE) {
  static $users = array();
  if (!isset($users[$name]) || $reset) {
    $result = db_result(db_query("SELECT uid FROM {users} WHERE name = '%s'", $name));
    $users[$name] = $result ? $result : 0;
  }
  return $users[$name];
}

/**
 * Given a uid, returns the name of that account. If the passed uid is
 * not found, returns the default "assign to" name as specified in the
 * settings. @todo This may not always be desired, but is how we use it.
 * See also casetracker_get_uid().
 */
function casetracker_get_name($uid = NULL, $reset = FALSE) {
  static $users = array();
  if (!isset($users[$uid]) || $reset) {
    $result = db_result(db_query("SELECT name FROM {users} WHERE uid = %d", $uid));
    $users[$uid] = $result ? $result : '';
  }
  return !empty($users[$uid]) ? $users[$uid] : variable_get('casetracker_default_assign_to', variable_get('anonymous', t('Anonymous')));
}

